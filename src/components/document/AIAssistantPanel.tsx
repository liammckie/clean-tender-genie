import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Card } from '@/components/ui/card';
import { toast } from 'sonner';
import { LLMConfig } from '@/pages/DocumentEditor';
import { CircleDot, Hexagon, Cpu } from 'lucide-react';
import { isGenkitInitialized, initGenkit, getGenkit } from '@/lib/genkit-ai';

interface AIAssistantPanelProps {
  documentContent: string;
  setDocumentContent: (content: string) => void;
  llmConfig: LLMConfig;
}

const AIAssistantPanel: React.FC<AIAssistantPanelProps> = ({
  documentContent,
  setDocumentContent,
  llmConfig,
}) => {
  const [prompt, setPrompt] = useState('');
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [conversation, setConversation] = useState<{role: string, content: string}[]>([]);
  const [apiKey, setApiKey] = useState<string>('');
  const [showApiKeyInput, setShowApiKeyInput] = useState<boolean>(false);
  
  useEffect(() => {
    // Check if we need to show API key input for Genkit
    if (llmConfig.provider === 'genkit' && !isGenkitInitialized()) {
      setShowApiKeyInput(true);
    } else {
      setShowApiKeyInput(false);
    }
  }, [llmConfig.provider]);
  
  // Common prompts for document editing
  const commonPrompts = [
    "Summarize this section",
    "Make this paragraph more concise",
    "Improve the tone to be more professional",
    "Add compliance information about WHS standards",
    "Generate section about our environmental initiatives",
  ];

  const initializeGenkit = () => {
    if (!apiKey.trim()) {
      toast.error("Please enter a valid Genkit API key");
      return false;
    }
    
    try {
      initGenkit(apiKey.trim());
      toast.success("Genkit AI initialized successfully");
      setShowApiKeyInput(false);
      return true;
    } catch (error) {
      console.error("Error initializing Genkit:", error);
      toast.error("Failed to initialize Genkit AI");
      return false;
    }
  };

  const generateContent = async () => {
    if (prompt.trim() === '') {
      toast.error("Please enter a prompt");
      return;
    }

    // Check if we need to initialize Genkit
    if (llmConfig.provider === 'genkit' && !isGenkitInitialized()) {
      if (!initializeGenkit()) {
        return;
      }
    }

    setIsLoading(true);

    try {
      // Add user message to conversation if in agent mode
      if (llmConfig.mode === 'agent') {
        setConversation([...conversation, {role: 'user', content: prompt}]);
      }
      
      let providerName = '';
      let response = '';
      
      switch (llmConfig.provider) {
        case 'openai':
          providerName = 'OpenAI';
          if (prompt.toLowerCase().includes("summarize")) {
            response = "## Executive Summary\n\nOur company offers industry-leading commercial cleaning services with a focus on quality, compliance with Australian WHS standards, and environmental sustainability. With over 15 years of experience, we deliver tailored solutions that meet the specific requirements of your facilities.";
          } else if (prompt.toLowerCase().includes("whs") || prompt.toLowerCase().includes("compliance")) {
            response = "## Compliance Information\n\nOur operations strictly adhere to all relevant Work Health and Safety legislation, including the Work Health and Safety Act 2011 and associated regulations. All staff undergo comprehensive training and certification in safe work practices, chemical handling, and emergency procedures. We maintain detailed documentation of all safety protocols and incident reporting systems.";
          } else {
            response = "## Generated Content (OpenAI)\n\nThis is a professionally generated response from OpenAI. The content is tailored to your document's context with temperature " + llmConfig.temperature + " and max tokens " + llmConfig.maxTokens + ". In a real implementation, this would be an actual API call to the OpenAI service.";
          }
          break;
        case 'gemini':
          providerName = 'Gemini Pro 2.5';
          response = "## Generated Content (Gemini Pro 2.5)\n\nThis is a response generated by Gemini Pro 2.5. The model has been configured with temperature " + llmConfig.temperature + " and max tokens " + llmConfig.maxTokens + ". In a real implementation, this would connect to Google's Gemini API for content generation.";
          break;
        case 'deepseek':
          providerName = 'DeepSeek';
          response = "## Generated Content (DeepSeek)\n\nThis is a response generated by DeepSeek. The model has been configured with temperature " + llmConfig.temperature + " and max tokens " + llmConfig.maxTokens + ". In a real implementation, this would connect to the DeepSeek API for advanced content generation.";
          break;
        case 'genkit':
          providerName = 'GenKit AI';
          // In a real implementation, this would call the Genkit API
          try {
            // Mock response for now - in actual implementation this would use getGenkit()
            response = "## Generated Content (GenKit AI)\n\nThis content was generated using GenKit AI. The model has been configured with temperature " + llmConfig.temperature + " and max tokens " + llmConfig.maxTokens + ". This is a simulated response - in a real implementation, this would connect to the GenKit API for advanced content generation with built-in RAG capabilities.";
          } catch (error) {
            console.error("Error using Genkit:", error);
            toast.error("Error generating content with GenKit");
            setIsLoading(false);
            return;
          }
          break;
        default:
          providerName = 'Default LLM';
          response = "## Generated Content\n\nThis is a generic response. Please select a specific provider for more tailored content.";
      }
      
      // Add AI response to conversation if in agent mode
      if (llmConfig.mode === 'agent') {
        setConversation([...conversation, {role: 'user', content: prompt}, {role: 'assistant', content: response}]);
      }
      
      setSuggestions([...suggestions, response]);
      toast.success(`Content generated using ${providerName}`);
      
    } catch (error) {
      console.error("Error generating content:", error);
      toast.error("Failed to generate content. Please try again.");
    } finally {
      setIsLoading(false);
      setPrompt(''); // Clear prompt field after generation
    }
  };

  const insertContent = (content: string) => {
    setDocumentContent(documentContent + "\n\n" + content);
    toast.success("Content inserted into document");
  };

  const handleCommonPromptClick = (promptText: string) => {
    setPrompt(promptText);
  };

  const getProviderIcon = () => {
    switch (llmConfig.provider) {
      case 'openai':
        return <CircleDot className="h-4 w-4 text-green-500" />;
      case 'gemini':
        return <CircleDot className="h-4 w-4 text-blue-500" />;
      case 'deepseek':
        return <Hexagon className="h-4 w-4 text-purple-500" />;
      case 'genkit':
        return <Cpu className="h-4 w-4 text-yellow-500" />;
      default:
        return null;
    }
  };

  return (
    <div className="p-4 h-full flex flex-col">
      <div className="flex justify-between items-center mb-4">
        <h2 className="font-semibold">AI Assistant</h2>
        <div className="flex items-center text-sm text-muted-foreground">
          {getProviderIcon()}
          <span className="ml-1">
            {llmConfig.provider.charAt(0).toUpperCase() + llmConfig.provider.slice(1)} 
            {llmConfig.mode === 'agent' ? ' (Agent Mode)' : ' (Single Request)'}
          </span>
        </div>
      </div>
      
      {showApiKeyInput && llmConfig.provider === 'genkit' && (
        <div className="mb-4 p-3 bg-spotify-black border border-spotify-gray rounded-md">
          <p className="text-sm mb-2 text-spotify-lightgray">Please enter your GenKit API key to continue</p>
          <div className="flex gap-2">
            <input
              type="password"
              value={apiKey}
              onChange={(e) => setApiKey(e.target.value)}
              placeholder="Enter GenKit API Key"
              className="flex-grow px-3 py-1 bg-[#1e1e1e] border border-spotify-gray text-white rounded-md"
            />
            <Button onClick={initializeGenkit} size="sm">
              Save Key
            </Button>
          </div>
          <p className="text-xs mt-2 text-spotify-lightgray">Your API key will be stored in browser memory only for this session.</p>
        </div>
      )}
      
      <div className="flex flex-wrap gap-2 mb-4">
        {commonPrompts.map((promptText, index) => (
          <Button 
            key={index} 
            variant="outline" 
            size="sm" 
            onClick={() => handleCommonPromptClick(promptText)}
          >
            {promptText}
          </Button>
        ))}
      </div>
      
      <div className="flex gap-2 mb-4">
        <Textarea
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="Enter a prompt for the AI assistant..."
          className="min-h-[80px]"
        />
        <Button 
          onClick={generateContent}
          disabled={isLoading || (llmConfig.provider === 'genkit' && showApiKeyInput)}
          className="whitespace-nowrap"
        >
          {isLoading ? "Generating..." : "Generate"}
        </Button>
      </div>
      
      {llmConfig.mode === 'agent' && conversation.length > 0 && (
        <div className="flex-grow overflow-auto mb-4 border rounded-md p-2 bg-spotify-darkgray border-spotify-gray">
          <h3 className="text-sm font-medium mb-2 text-white">Conversation History</h3>
          {conversation.map((message, index) => (
            <div key={index} className={`mb-2 p-2 rounded ${message.role === 'user' ? 'bg-[#2a2a2a]' : 'bg-[#1e1e1e]'}`}>
              <p className="text-xs font-medium text-spotify-lightgray">{message.role === 'user' ? 'You' : 'AI'}</p>
              <p className="text-sm text-white">{message.content.length > 100 ? message.content.substring(0, 100) + '...' : message.content}</p>
            </div>
          ))}
        </div>
      )}
      
      <div className="flex-grow overflow-auto">
        {suggestions.length === 0 ? (
          <p className="text-spotify-lightgray text-center">No suggestions yet</p>
        ) : (
          <div className="space-y-4">
            {suggestions.map((suggestion, index) => (
              <Card key={index} className="p-3 bg-spotify-darkgray border-spotify-gray">
                <pre className="whitespace-pre-wrap text-sm mb-2 text-white">{suggestion}</pre>
                <Button 
                  onClick={() => insertContent(suggestion)}
                  size="sm"
                  className="w-full"
                >
                  Insert into Document
                </Button>
              </Card>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default AIAssistantPanel;
